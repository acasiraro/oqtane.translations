<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Name.Text" xml:space="preserve">
    <value>Nome: </value>
  </data>
  <data name="Minute(s)" xml:space="preserve">
    <value>Minuto/i</value>
  </data>
  <data name="Hour(s)" xml:space="preserve">
    <value>Ore</value>
  </data>
  <data name="Day(s)" xml:space="preserve">
    <value>Giorno/i</value>
  </data>
  <data name="Month(s)" xml:space="preserve">
    <value>Mese/i</value>
  </data>
  <data name="Error.Job.Load" xml:space="preserve">
    <value>Errore caricameneto Job</value>
  </data>
  <data name="Error.Job.Update" xml:space="preserve">
    <value>Errore aggiornamento Job</value>
  </data>
  <data name="Message.Required.JobInfo" xml:space="preserve">
    <value>Devi fornire il nome del Job, il Tipo, la frequenza e il mantenimento prima che venga eliminato</value>
    <comment>You Must Provide The Job Name, Type, Frequency, and Retention</comment>
  </data>
  <data name="Name.HelpText" xml:space="preserve">
    <value>Inserisci il nome del Job</value>
  </data>
  <data name="Type.HelpText" xml:space="preserve">
    <value>Il nome del tipo di Job completamente qualificato</value>
    <comment>The fully qualified job type name</comment>
  </data>
  <data name="Enabled.HelpText" xml:space="preserve">
    <value>Seleziona se desideri abilitare o meno il Job</value>
    <comment>Select whether you want the job enabled or not</comment>
  </data>
  <data name="RunsEvery.HelpText" xml:space="preserve">
    <value>Seleziona con quale frequenza desideri che il Job venga eseguito</value>
    <comment>Select how often you want the job to run</comment>
  </data>
  <data name="Starting.HelpText" xml:space="preserve">
    <value>Opzionalmente inserisci la data e l'orario in cui questo lavoro dovrebbe iniziare ad eseguire</value>
    <comment>Optionally enter the date and time when this job should start executing</comment>
  </data>
  <data name="Ending.HelpText" xml:space="preserve">
    <value>Opzionalmente inserisci la data e l'ora di quando il Job deve essere arrestato</value>
    <comment>Optionally enter the date and time when this job should stop executing</comment>
  </data>
  <data name="RetentionLog.HelpText" xml:space="preserve">
    <value>Numero di Log da mantenere per questo Job</value>
    <comment>Number of log entries to retain for this job</comment>
  </data>
  <data name="NextExecution.HelpText" xml:space="preserve">
    <value>Opzionalmente modificare la data e l'orario in cui questo lavoro dovrebbe essere eseguito successivamente</value>
    <comment>Optionally modify the date and time when this job should execute next</comment>
  </data>
  <data name="Type.Text" xml:space="preserve">
    <value>Tipo: </value>
  </data>
  <data name="Enabled.Text" xml:space="preserve">
    <value>Abilitarlo? </value>
  </data>
  <data name="RunsEvery.Text" xml:space="preserve">
    <value>Esegui ogni: </value>
  </data>
  <data name="Starting.Text" xml:space="preserve">
    <value>Inizio: </value>
  </data>
  <data name="Ending.Text" xml:space="preserve">
    <value>Termina: </value>
    <comment>Ending:</comment>
  </data>
  <data name="RetentionLog.Text" xml:space="preserve">
    <value>Numero Log da mantenere: </value>
    <comment>Retention Log (Items):</comment>
  </data>
  <data name="NextExecution.Text" xml:space="preserve">
    <value>Prossima esecuzione: </value>
  </data>
  <data name="Week(s)" xml:space="preserve">
    <value>Settimana/e</value>
  </data>
  <data name="Once" xml:space="preserve">
    <value>Esegui una volta</value>
  </data>
  <data name="Message.StartEndDateError" xml:space="preserve">
    <value>La data di inizio non pu√≤ essere successiva alla data fine.</value>
  </data>
</root>