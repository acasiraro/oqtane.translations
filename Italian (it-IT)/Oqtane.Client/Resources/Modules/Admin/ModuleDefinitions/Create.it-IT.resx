<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Template.Text" xml:space="preserve">
    <value>Modello: </value>
  </data>
  <data name="Template.Select" xml:space="preserve">
    <value>Seleziona Modello</value>
  </data>
  <data name="CreateModule" xml:space="preserve">
    <value>Crea Modulo</value>
  </data>
  <data name="Info.Module.Development" xml:space="preserve">
    <value>Fai attenzione che il creatore dei moduli è destinato solo per essere utilizzato in ambiente di sviluppo</value>
  </data>
  <data name="Message.Require.ValidName" xml:space="preserve">
    <value>Devi fornire un nome di proprietario e un nome di modulo validi (ad esempio, senza punteggiatura o spazi e i valori non possono essere uguali o contenere la parola "Oqtane") e scegliere un modello</value>
  </data>
  <data name="Message.Require.ValidDescription" xml:space="preserve">
    <value>Fornire una descrizione valida (per es. Senza punteggiatura)</value>
    <comment>You Must Provide A Valid Description (ie. No Punctuation)</comment>
  </data>
  <data name="OwnerName.HelpText" xml:space="preserve">
    <value>Inserire il nome dell'organizzazione che sta sviluppando questo modulo. Non potrà contenere spazi, punteggiatura o contenere la parola "oqtane".</value>
  </data>
  <data name="ModuleName.HelpText" xml:space="preserve">
    <value>Inserisci un nome per questo modulo. Non dovrà contenere spazi, punteggiatura o contenere la parola "oqtane".</value>
  </data>
  <data name="Description.HelpText" xml:space="preserve">
    <value>Inserisci una breve descrizione del modulo</value>
  </data>
  <data name="Template.HelpText" xml:space="preserve">
    <value>Seleziona un modello di modulo. I modelli si trovano nella cartella wwwroot/Modules/Templates sul server.</value>
  </data>
  <data name="FrameworkReference.HelpText" xml:space="preserve">
    <value>Seleziona una versione di riferimento del framework</value>
    <comment>Select a framework reference version</comment>
  </data>
  <data name="Location.HelpText" xml:space="preserve">
    <value>Posizione in cui verrà creato il modulo</value>
    <comment>Location where the module will be created</comment>
  </data>
  <data name="OwnerName.Text" xml:space="preserve">
    <value>Proprietario: </value>
    <comment>Owner Name:</comment>
  </data>
  <data name="ModuleName.Text" xml:space="preserve">
    <value>Nome Modulo: </value>
  </data>
  <data name="Description.Text" xml:space="preserve">
    <value>Descrizione: </value>
  </data>
  <data name="FrameworkReference.Text" xml:space="preserve">
    <value>Framework: </value>
    <comment>Framework Reference:</comment>
  </data>
  <data name="Location.Text" xml:space="preserve">
    <value>Posizione: </value>
    <comment>Location:</comment>
  </data>
  <data name="Success.Module.Create" xml:space="preserve">
    <value>Il codice sorgente del tuo modulo è stato creato nella posizione specificata di seguito e deve essere compilato per renderlo funzionale. Una volta compilato, devi &lt;a href={0}&gt;Riavviare&lt;/a&gt;  la tua applicazione per attivare il modulo.</value>
  </data>
</root>